{"version":3,"sources":["resultList/ResultList.js","App.js","registerServiceWorker.js","index.js"],"names":["ResultList","numberOfResults","this","props","randomNumbers","length","className","map","randomNumber","i","Component","MAX_ALLOWED_VALUE","App","state","minValue","maxValue","lotto","newRandom","tryCount","getRandomInt","indexOf","setState","event","target","value","parseInt","isNaN","name","checked","Grid","Row","Col","xs","FormGroup","controlId","bsSize","ControlLabel","FormControl","type","onChange","handleInputChange","bind","Checkbox","id","onChangeLotto","Button","onClick","generateRandomNumbers","bsStyle","block","min","max","Math","ceil","floor","random","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fb4c5566.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./ResultList.css\";\nimport PropTypes from \"prop-types\";\n\nexport default class ResultList extends Component {\n  render() {\n    const numberOfResults = this.props.randomNumbers.length;\n    return (\n      <div className=\"Results\">\n        {this.props.randomNumbers.map((randomNumber, i) => (\n          <div key={numberOfResults - i}>\n            <strong className={i === 0 ? \"newest-result\" : \"\"}>\n              {randomNumber}\n            </strong>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nResultList.propTypes = {\n  randomNumbers: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Button,\n  Checkbox,\n  Col,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Grid,\n  Row,\n} from \"react-bootstrap\";\nimport ResultList from \"./resultList/ResultList\";\n\nconst MAX_ALLOWED_VALUE = 1000000000;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      randomNumbers: [],\n      minValue: 1,\n      maxValue: 32,\n      lotto: false,\n    };\n  }\n\n  static getRandomInt(min, max) {\n    max = max + 1;\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  generateRandomNumbers() {\n    let newRandom;\n    let tryCount = 0;\n    do {\n      tryCount++;\n      newRandom = App.getRandomInt(this.state.minValue, this.state.maxValue);\n    } while (\n      this.state.lotto &&\n      tryCount < 10000 &&\n      this.state.randomNumbers.indexOf(newRandom) >= 0\n    );\n    this.setState({\n      randomNumbers: [newRandom, ...this.state.randomNumbers],\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    let value = target.value;\n    value = parseInt(value, 10);\n    if (isNaN(value) || value < 0) {\n      value = \"\";\n    } else if (value > MAX_ALLOWED_VALUE) {\n      value = MAX_ALLOWED_VALUE;\n    }\n\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  onChangeLotto(event) {\n    const target = event.target;\n    const value = target.checked;\n\n    this.setState({\n      lotto: value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Zufallszahlengenerator</h1>\n        </header>\n\n        <Grid>\n          <Row>\n            <Col xs={4}>\n              <FormGroup controlId=\"min\" bsSize=\"large\">\n                <ControlLabel>Min</ControlLabel>{\" \"}\n                <FormControl\n                  name=\"minValue\"\n                  type=\"number\"\n                  value={this.state.minValue}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col xs={4}>\n              <FormGroup controlId=\"max\" bsSize=\"large\">\n                <ControlLabel>Max</ControlLabel>{\" \"}\n                <FormControl\n                  name=\"maxValue\"\n                  type=\"number\"\n                  value={this.state.maxValue}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col xs={4}>\n              <FormGroup controlId=\"lotto\" bsSize=\"large\">\n                <ControlLabel>Jede Zahl nur einmal</ControlLabel>{\" \"}\n                <Checkbox\n                  id=\"lotto\"\n                  value={this.state.lotto}\n                  onChange={this.onChangeLotto.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col xs={12}>\n              <Button\n                onClick={this.generateRandomNumbers.bind(this)}\n                bsStyle=\"primary\"\n                bsSize=\"large\"\n                block\n              >\n                {this.state.lotto ? \"Zahl ziehen\" : \"WÃ¼rfeln\"}\n              </Button>\n            </Col>\n          </Row>\n        </Grid>\n        <ResultList randomNumbers={this.state.randomNumbers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap-theme.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}